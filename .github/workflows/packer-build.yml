name: Instance Refresh

env:
  ARTIFACT_NAME: webapp
  AWS_REGION: us-east-1

on:
  push:
    branches: [master]
jobs:
  # Check basic tests
  tests:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [16.x]

    name: Run unit tests
    steps:
      - uses: actions/checkout@v2
      - name: 'Create .env file'
        run: |
          touch .env
          echo ENVIRONMENT=${{ secrets.ENVIRONMENT }} >> .env
          echo HOSTNAME=${{ secrets.HOSTNAME }} >> .env
          echo PORT=${{ secrets.PORT }} >> .env
          echo DATABASE=${{ secrets.DATABASE }} >> .env
          echo DBUSER=${{ secrets.DBUSER }} >> .env
          echo DBPASSWORD=${{ secrets.DBPASSWORD }} >> .env
      - uses: actions/setup-node@v2
        with:
          node-version: ${{ matrix.node-version }}
      - run: yarn
      - run: yarn test
  # Packer init, validate and build
  packer:
    needs: tests
    runs-on: ubuntu-latest
    name: Build AWS Custom AMI with REST API app artifacts
    steps:
      - name: Checkout code from branch
        uses: actions/checkout@v2

      - name: Build artifacts
        run: |
          touch .env
          echo ENVIRONMENT=${{ secrets.ENVIRONMENT }} >> .env
          echo HOSTNAME=${{ secrets.HOSTNAME }} >> .env
          echo PORT=${{ secrets.PORT }} >> .env
          echo DATABASE=${{ secrets.DATABASE }} >> .env
          echo DBUSER=${{ secrets.DBUSER }} >> .env
          echo DBPASSWORD=${{ secrets.DBPASSWORD }} >> .env
          zip -r webapp.zip ./
          pwd ./webapp

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_DEV_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_DEV_SECRET_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Packer init
        uses: hashicorp/packer-github-actions@master
        with:
          command: init
          target: ami.pkr.hcl

      - name: Validate packer template
        uses: hashicorp/packer-github-actions@master
        with:
          command: validate
          target: ami.pkr.hcl

      - name: Packer build
        uses: hashicorp/packer-github-actions@master
        with:
          command: build
          arguments: '-color=false -on-error=abort'
          target: ami.pkr.hcl
        env:
          PACKER_LOG: 1
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_PROD_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_PROD_SECRET_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
      - name: Instance Refresh automation
        run: |
          sudo apt-get install jq
          ASG_NAME=${{ secrets.ASG_NAME }}
          LAUNCH_CONFIG=${{ secrets.LAUNCH_CONFIG }}
          IMAGE=$(jq -r '.builds[-1].artifact_id' manifest.json | cut -d':' -f2)
          IMAGE_ID=$(jq -n \
            --arg img "$IMAGE" \
            '{"ImageId": $img}')
          aws ec2 create-launch-template-version \
            --launch-template-name "$LAUNCH_CONFIG" \
            --version-description updateAMI --source-version 1 \
            --launch-template-data="$IMAGE_ID"
          aws autoscaling update-auto-scaling-group --auto-scaling-group-name $ASG_NAME \
            --launch-template LaunchTemplateName="$LAUNCH_CONFIG",Version='$Latest'
          aws autoscaling start-instance-refresh \
            --auto-scaling-group-name $ASG_NAME
          printf "Instance refresh in progress"
          while true;
          do
            instance_refresh_status=$(aws autoscaling describe-instance-refreshes --auto-scaling-group-name $ASG_NAME \
              --query "InstanceRefreshes[0].Status" --output text)
            if [ "$instance_refresh_status" = "Successful" ]; then
              printf "\nInstance refresh successful!"
              break
            fi
            if [ "$instance_refresh_status" = "Cancelling" ] || [ "$instance_refresh_status" = "Cancelled" ] || [ "$instance_refresh_status" = "Failed" ]; then
              echo "\nInstance refresh failed!"
              exit 1
            fi
            echo -ne "."
            sleep 10
          done
